buildscript {
    ext {
        flywayVersion = "6.5.7"
    }
}
plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version( "6.5.7")
}
ext{
    mockitoVersion = '3.9.0'
    flywayVersion = '6.5.7'
}
group = 'com.darcy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

flyway {
    locations = ["classpath:db/migration"]
    url="jdbc:postgresql://localhost:5432/postgres?currentSchema=restaurant"
    user="postgres"
    password="admin"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.11.2' // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    compile "org.mapstruct:mapstruct:1.4.0.Beta1"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.0.Beta1"

    testImplementation ('org.springframework.boot:spring-boot-starter-test'){
        exclude group:'org.junit.vintage', module:'junit-vintage-engine'
    }
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.springframework.security:spring-security-test"

}

test {
    useJUnitPlatform()
}

apply plugin:'java'
jar {
    from{
        (configurations.runtime).collect{
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
